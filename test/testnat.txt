axiom absurd:type
axiom unit:type
axiom trivial:unit
axiom ex_falso:forall T:type.absurd=>type




#Axioms of equality
axiom =:(nat and nat)=>type
axiom eq_refl:forall x:nat.x=x
axiom eq_elim:forall P:nat=>type.forall x:nat.forall y:nat.(x=y)=>P x=>P y 

#Properties of equality relation

#Symmetry
lemma eq_sym:forall x:nat.forall y:nat.x=y=>y=x:=
	lambda x:nat.
		lambda y:nat.
			lambda xy_eq:(x=y).
				let p:nat=>type:=
					lambda a:nat.
						a=x
				in
					eq_elim p x y xy_eq (eq_refl x)

#Transitivity
lemma eq_trans:forall x:nat.forall y:nat.forall z:nat.((x=y and y=z)=>x=z):=
	lambda x:nat.
		lambda y:nat.
			lambda z:nat.
				lambda eqs:(x=y and y=z).
					let p:nat=>type:=lambda a:nat.x=a in
						eq_elim p y z (right eqs) (left eqs)


#Basic lemmas

#Identical elements map to identical resuls

define map_uniqueness:forall f:nat=>nat.forall x:nat.forall y:nat.x=y=>f(x)=f(y):=
	lambda f:nat=>nat.
		lambda x:nat.
			lambda y:nat.
				lambda xy_equal:x=y.
					let f_x_refl:f(x)=f(x):=eq_refl (f(x)) in
						eq_elim (lambda n:nat.f(x)=f(n)) x y xy_equal f_x_refl



##Properties of successor function

#Successor is always nonzero
define s_nonzero:forall n:nat.(s n=0)=>absurd:=
	let disjoint_ty:nat=>type:=
		lambda n:nat.
			induction (lambda z:nat.type) unit (lambda z:nat.lambda ass:type.absurd) n
	in lambda n:nat.
		lambda succ_zero:(s n=0).
			let flipped_eq:0=s(n):=(eq_sym (s(n)) 0 succ_zero) in
				(eq_elim disjoint_ty 0 (s(n)) flipped_eq) trivial


#Successor function is injective

define pred:nat=>nat:=
	lambda n:nat.
		induction (lambda z:nat.nat) 0 (lambda z:nat.lambda pred_z:nat.z) n

define s_injective:forall x:nat.forall y:nat.s(x)=s(y)=>x=y:=
	lambda x:nat.
		lambda y:nat.
			lambda succ_eq:s(x)=s(y).
				map_uniqueness pred (s(x)) (s(y)) succ_eq



#Define addition	

define +:nat and nat=>nat:=
	lambda args:nat and nat.
			induction (lambda z:nat.nat) (right args) (lambda z:nat.lambda x_plus_y:nat.s x_plus_y) (left args)

#Properties of addition

#Zero is the identity of addition

lemma add_ident:forall x:nat.(0+x=x and x+0=x):=
	let hyp:nat=>type:=lambda x:nat.x+0=x in
	let base:hyp 0:=eq_refl 0 in
	let step:forall x:nat.hyp x=>hyp (s x):=
		lambda x:nat.
			lambda ass:x+0=x.
				let a:s(x)+0=s(x+0):=eq_refl (s(x+0)) in
				let b:s(x+0)=s(x):=map_uniqueness (lambda n:nat.s(n)) (x+0) x ass in
					eq_trans (s(x)+0) (s(x+0)) (s(x)) (a,b)
	in
		lambda x:nat.(eq_refl x,induction hyp base step x)

#Addition commutes

lemma factor_succ_right:forall x:nat.forall y:nat.x+s(y)=s(x+y):=
	let hyp:nat=>type:=lambda x:nat.forall y:nat.x+s(y)=s(x+y) in
	let base:hyp 0:=lambda y:nat.eq_refl(s(y)) in 
	let step:forall x:nat.hyp x=>hyp(s(x)):=
		lambda x:nat.
			lambda ass:hyp x.
				lambda y:nat.
					map_uniqueness (lambda z:nat.s(z)) (x+s(y)) (s(x+y)) (ass y)
	in lambda x:nat.(induction hyp base step x)


lemma add_commutative:forall x:nat.forall y:nat.x+y=y+x:=
	let hyp:nat=>type:=lambda x:nat.forall y:nat.x+y=y+x in
	let base:forall y:nat.0+y=y+0:=
		lambda y:nat.eq_sym (y+0) y (right (add_ident y))
	in let step:forall x:nat.hyp(x)=>hyp(s(x)):=
		lambda x:nat.
			lambda ass:hyp(x).
				lambda y:nat.  
					let t1:y+s(x)=s(y+x):=factor_succ_right y x in
					let t2:s(x+y)=s(y+x):=map_uniqueness (lambda z:nat.s(z)) (x+y) (y+x)  (ass y) in
						eq_trans (s(x+y)) (s(y+x)) (y+s(x)) (t2,eq_sym (y+s(x)) (s(y+x)) t1)
	in (lambda x:nat.induction hyp base step x)

#Addition is associative

lemma add_associative:forall x:nat.forall y:nat.forall z:nat.x+(y+z)=(x+y)+z:=
	let hyp:nat=>type:=lambda x:nat.forall y:nat.forall z:nat.x+(y+z)=(x+y)+z in
	let base:hyp 0:=lambda y:nat.lambda z:nat.eq_refl (y+z) in
	let step:forall x:nat.hyp(x)=>hyp(s(x)):=
		lambda x:nat.
			lambda ass:hyp(x).
				lambda y:nat.
					lambda z:nat.
						map_uniqueness (lambda n:nat.s(n)) (x+(y+z)) ((x+y)+z) (ass y z)
	in lambda x:nat.(induction hyp base step x)



#Define multiplication

define *:nat and nat=>nat:=
	lambda args:nat and nat.
			induction (lambda z:nat.nat) 0 (lambda z:nat.lambda x_times_y:nat.x_times_y+(right args)) (left args)


#Multiplication by zero gives zero


lemma mul_zero:forall x:nat.(0*x=0 and x*0=0):=
	let hyp:nat=>type:=lambda x:nat.x*0=0 in
	let base:hyp 0:=eq_refl 0 in
	let step:forall x:nat.hyp(x)=>hyp(s(x)):=
		lambda x:nat.
			lambda ass:hyp(x).
				eq_trans (x*0+0) (x*0) 0 (right (add_ident (x*0)),ass) in
		lambda x:nat.(eq_refl 0,induction hyp base step x)
	

#One is the identity of multiplication

lemma mul_ident:forall x:nat.(s(0)*x=x and x*s(0)=x):=
	let hyp:nat=>type:=lambda x:nat.x*s(0)=x in
	let base:0*s(0)=0:=eq_refl 0 in
	let step:forall x:nat.hyp(x)=>hyp(s(x)):=
		lambda x:nat.
			lambda ass:hyp(x).
				let t1:x+s(0)=s(x):=add_commutative x (s(0)) in
					eq_elim (lambda z:nat.z+s(0)=s(x)) x (x*s(0)) (eq_sym (x*s(0)) x ass) t1 in
		lambda x:nat.(eq_refl x,induction hyp base step x)


#Multiplication commutes

#axiom x:nat
#axiom y:nat

#axiom x:nat
#lemma hyp:nat=>type:=lambda z:nat.z*y=y*z
#lemma base:hyp(0):=eq_sym (y*0) 0 (right (mul_zero y))
#lemma step:forall x:nat.hyp(x)=>hyp(s(x)):=
#	lambda x:nat.
#		lambda ass:hyp(x).


mul_factor_succ_right:forall x:nat.forall y:nat.y*s(x)=y*x+y:=
	lambda x:nat.
		lambda y:nat.x


	#	let hyp:nat=>type:=lambda y:nat.y*s(x)=y*x+y in
	#	let base:hyp(0):=eq_refl 0 in
		#let step:forall y:nat.hyp(y)=>hyp(s(y)):=
		#	lambda y:nat.
		#		lambda ass:hyp(y).
		#			let t1:y*x+y+s(x)=y*x+y+s(x):=eq_refl (y*x+y+s(x)) in
		#			#let t2:y*x+y+s(x)=y*x+(y+s(x)):=eq_trans (y*x+y+s(x)) (y*x+y+s(x)) (y*x+(y+s(x))) (t1,eq_sym (y*x+(y+s(x))) (y*x+y+s(x)) (add_associative (y*x) y (s x))) in
		#			let t3:y*x+y+s(x)=y*x+(s(y+x)):=eq_elim (lambda z:nat.y*x+y+s(x)=y*x+z) (y+s(x)) (s(y+x)) (factor_succ_right y x) t2 in
		#			let t4:y*x+y+s(x)=y*x+(s(x+y)):=eq_elim (lambda z:nat.y*x+y+s(x)=y*x+s(z)) (y+x) (x+y) (add_commutative y x) t3 in
		#			let t5:y*x+y+s(x)=y*x+(x+s(y)):=eq_elim (lambda z:nat.y*x+y+s(x)=y*x+z) (s(x+y)) (x+s(y)) (eq_sym (x+s(y)) (s(x+y)) (factor_succ_right x y)) t4 in
		#			#let t6:y*x+y+s(x)=y*x+x+s(y):=eq_trans (y*x+y+s(x)) (y*x+(x+s(y))) (y*x+x+s(y)) (t5,add_associative (y*x) x (s(y))) in
		#				eq_elim (lambda z:nat.z+s(x)=y*x+x+s(y)) (y*x+y) (y*s(x)) (eq_sym (y*s(x)) (y*x+y) ass) t6 in
	#	forall y:nat.induction hyp base step y



#y*x+y+s(x)=y*x+y+s(x) by eq_refl
#y*x+y+s(x)=y*x+(y+s(x)) by add_associativity
#y*x+y+s(x)=y*x+(s(y+x)) by factor_succ_right
#y*x+y+s(x)=y*x+(s(x+y)) by add_commutativity
#y*x+y+s(x)=y*x+(x+s(y)) by factor_succ_right
#y*x+y+s(x)=(y*x+x)+s(y) by add_associativity
#y*s(x)+s(x)=(y*x+x)+s(y) by assumption







#lemma mul_commutative:forall x:nat.forall y:nat.x*y=y*x:=

